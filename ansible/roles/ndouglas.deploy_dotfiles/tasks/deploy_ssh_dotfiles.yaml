---

- name: 'Set facts for the SSH file path.'
  ansible.builtin.set_fact:
    ssh_path: "{{ ansible_env.HOME }}/.ssh"

- name: 'Set facts for various SSH files.'
  ansible.builtin.set_fact:
    ssh_config_path: "{{ ssh_path }}/config"
    ssh_config_dir: "{{ ssh_path }}/config.d"
    ssh_private_key_path: "{{ ssh_path }}/id_rsa"
    ssh_public_key_path: "{{ ssh_path }}/id_rsa.pub"

- name: "Create temporary directory."
  ansible.builtin.tempfile:
    state: 'directory'
  register: 'temporary_directory'
  changed_when: no

- name: "Copy SSH static dotfiles {{ role_path }}/files/ssh/config/ -> temporary directory."
  ansible.builtin.copy:
    src: "{{ item }}"
    dest: "{{ temporary_directory.path }}"
  with_fileglob:
    - "{{ role_path }}/files/ssh/config/*.ini"
  changed_when: no

- name: "Copy SSH template dotfiles {{ role_path }}/files/ssh/config/ -> temporary directory."
  ansible.builtin.template:
    src: "{{ item }}"
    dest: "{{ temporary_directory.path }}/{{ item | basename | splitext | first }}"
  with_fileglob:
    - "{{ role_path }}/files/ssh/config/*.j2"
  changed_when: no

- name: 'Delete the SSH config directory.'
  ansible.builtin.file:
    path: "{{ ssh_config_dir }}"
    state: absent
  changed_when: no

- name: 'Create the SSH config directory.'
  ansible.builtin.file:
    path: "{{ ssh_config_dir }}"
    owner: "{{ user }}"
    group: "{{ group }}"
    mode: '0700'
    state: directory
  changed_when: no

- name: 'Set up the new SSH config file with the defaults I like.'
  ansible.builtin.copy:
    src: "{{ role_path }}/files/ssh/config.ini"
    dest: "{{ ssh_config_path }}"
    owner: "{{ user }}"
    group: "{{ group }}"
    mode: '0600'
    backup: yes
    force: yes

- name: "Copy SSH dotfiles temporary directory -> {{ ssh_config_dir }}."
  ansible.builtin.copy:
    src: "{{ item }}"
    dest: "{{ ssh_config_dir }}"
    owner: "{{ user }}"
    group: "{{ group }}"
    mode: '0600'
    force: yes
  with_fileglob:
    - "{{ temporary_directory.path }}/*"
  changed_when: no

- name: 'Create an SSH key if one does not already exist.'
  community.crypto.openssh_keypair:
    path: "{{ ssh_private_key_path }}"
    comment: "{{ user_at_hostname }}"
    owner: "{{ user }}"
    group: "{{ group }}"
    mode: '0600'
    regenerate: 'full_idempotence'
    size: 4096
    type: 'rsa'

- name: 'Copy SSH public key.'
  ansible.builtin.copy:
    dest: "{{ role_path }}/files/ssh/authorized_keys/{{ user_at_hostname }}.pub"
    content: "{{ lookup('file', ssh_public_key_path) }}"
    force: yes

- name: 'Write SSH authorized keys.'
  ansible.posix.authorized_key:
    user: "{{ user }}"
    key: "{{ lookup('file', item) }}"
    state: 'present'
  with_fileglob:
    - "{{ role_path }}/files/ssh/authorized_keys/*.pub"

- name: 'Register public key with GitHub.'
  community.general.github_key:
    name: "{{ user_at_hostname }}"
    token: "{{ github_access_token }}"
    pubkey: "{{ lookup('file', ssh_public_key_path) }}"
