---
- name: 'Add Traefik chart repository.'
  kubernetes.core.helm_repository:
    name: 'traefik'
    repo_url: 'https://helm.traefik.io/traefik'

- name: 'Deploy Traefik.'
  kubernetes.core.helm:
    name: 'traefik'
    chart_ref: 'traefik/traefik'
    release_namespace: 'traefik'
    create_namespace: yes
    values:
      # deployment:
      #   enabled: true
      #   # Can be either Deployment or DaemonSet
      #   kind: Deployment
      #   # Number of pods of the deployment (only applies when kind == Deployment)
      #   replicas: 1
      #   # Additional deployment annotations (e.g. for jaeger-operator sidecar injection)
      #   annotations: {}
      #   # Additional deployment labels (e.g. for filtering deployment by custom labels)
      #   labels: {}
      #   # Additional pod annotations (e.g. for mesh injection or prometheus scraping)
      #   podAnnotations: {}
      #   # Additional Pod labels (e.g. for filtering Pod by custom labels)
      #   podLabels: {}
      #   # Additional containers (e.g. for metric offloading sidecars)
      #   additionalContainers: []
      #     # https://docs.datadoghq.com/developers/dogstatsd/unix_socket/?tab=host
      #     # - name: socat-proxy
      #     # image: alpine/socat:1.0.5
      #     # args: ["-s", "-u", "udp-recv:8125", "unix-sendto:/socket/socket"]
      #     # volumeMounts:
      #     #   - name: dsdsocket
      #     #     mountPath: /socket
      #   # Additional volumes available for use with initContainers and additionalContainers
      #   additionalVolumes: []
      #     # - name: dsdsocket
      #     #   hostPath:
      #     #     path: /var/run/statsd-exporter
      #   # Additional initContainers (e.g. for setting file permission as shown below)
      #   initContainers: []
      #     # The "volume-permissions" init container is required if you run into permission issues.
      #     # Related issue: https://github.com/traefik/traefik/issues/6972
      #     # - name: volume-permissions
      #     #   image: busybox:1.31.1
      #     #   command: ["sh", "-c", "chmod -Rv 600 /data/*"]
      #     #   volumeMounts:
      #     #     - name: data
      #     #       mountPath: /data
      #   # Custom pod DNS policy. Apply if `hostNetwork: true`
      #   # dnsPolicy: ClusterFirstWithHostNet
      #   # Additional imagePullSecrets
      #   imagePullSecrets: []
      #    # - name: myRegistryKeySecretName
      #
      # # Pod disruption budget
      # podDisruptionBudget:
      #   enabled: false
      #   # maxUnavailable: 1
      #   # minAvailable: 0
      #
      ingressClass:
        enabled: yes
        isDefaultClass: yes
      #
      # # Activate Pilot integration
      # pilot:
      #   enabled: false
      #   token: ""
      #   # Toggle Pilot Dashboard
      #   # dashboard: false
      #
      # # Enable experimental features
      # experimental:
      #   plugins:
      #     enabled: false
      #   kubernetesGateway:
      #     enabled: false
      #     appLabelSelector: "traefik"
      #     certificates: []
      #     # - group: "core"
      #     #   kind: "Secret"
      #     #   name: "mysecret"
      #     # By default, Gateway would be created to the Namespace you are deploying Traefik to.
      #     # You may create that Gateway in another namespace, setting its name below:
      #     # namespace: default
      #
      # # Create an IngressRoute for the dashboard
      # ingressRoute:
      #   dashboard:
      #     enabled: true
      #     # Additional ingressRoute annotations (e.g. for kubernetes.io/ingress.class)
      #     annotations: {}
      #     # Additional ingressRoute labels (e.g. for filtering IngressRoute by custom labels)
      #     labels: {}
      #
      # rollingUpdate:
      #   maxUnavailable: 1
      #   maxSurge: 1
      #
      #
      # #
      # # Configure providers
      # #
      providers:
      #   kubernetesCRD:
      #     enabled: true
      #     allowCrossNamespace: false
      #     namespaces: []
      #       # - "default"
        kubernetesIngress:
          enabled: yes
          namespaces:
            - 'default'
            - 'whoami'
      #     # IP used for Kubernetes Ingress endpoints
      #     publishedService:
      #       enabled: false
      #       # Published Kubernetes Service to copy status from. Format: namespace/servicename
      #       # By default this Traefik service
      #       # pathOverride: ""
      #
      # #
      # # Add volumes to the traefik pod. The volume name will be passed to tpl.
      # # This can be used to mount a cert pair or a configmap that holds a config.toml file.
      # # After the volume has been mounted, add the configs into traefik by using the `additionalArguments` list below, eg:
      # # additionalArguments:
      # # - "--providers.file.filename=/config/dynamic.toml"
      # # - "--ping"
      # # - "--ping.entrypoint=web"
      # volumes: []
      # # - name: public-cert
      # #   mountPath: "/certs"
      # #   type: secret
      # # - name: '{{ printf "%s-configs" .Release.Name }}'
      # #   mountPath: "/config"
      # #   type: configMap
      #
      # # Additional volumeMounts to add to the Traefik container
      # additionalVolumeMounts: []
      #   # For instance when using a logshipper for access logs
      #   # - name: traefik-logs
      #   #   mountPath: /var/log/traefik
      #
      # # Logs
      # # https://docs.traefik.io/observability/logs/
      logs:
        general:
          level: DEBUG
        access:
          enabled: yes
      #
      # metrics:
      #   # datadog:
      #   #   address: 127.0.0.1:8125
      #   # influxdb:
      #   #   address: localhost:8089
      #   #   protocol: udp
      #   prometheus:
      #     entryPoint: metrics
      #   # statsd:
      #   #   address: localhost:8125
      #
      # globalArguments:
      #   - "--global.checknewversion"
      #   - "--global.sendanonymoususage"
      #
      # #
      # # Configure Traefik static configuration
      # # Additional arguments to be passed at Traefik's binary
      # # All available options available on https://docs.traefik.io/reference/static-configuration/cli/
      # ## Use curly braces to pass values: `helm install --set="additionalArguments={--providers.kubernetesingress.ingressclass=traefik-internal,--log.level=DEBUG}"`
      # additionalArguments: []
      # #  - "--providers.kubernetesingress.ingressclass=traefik-internal"
      # #  - "--log.level=DEBUG"
      #
      # # Environment variables to be passed to Traefik's binary
      # env: []
      # # - name: SOME_VAR
      # #   value: some-var-value
      # # - name: SOME_VAR_FROM_CONFIG_MAP
      # #   valueFrom:
      # #     configMapRef:
      # #       name: configmap-name
      # #       key: config-key
      # # - name: SOME_SECRET
      # #   valueFrom:
      # #     secretKeyRef:
      # #       name: secret-name
      # #       key: secret-key
      #
      # envFrom: []
      # # - configMapRef:
      # #     name: config-map-name
      # # - secretRef:
      # #     name: secret-name
      #
      # # Configure ports
      ports:
        traefik:
          port: 9000
          expose: yes
          exposedPort: 9000
          protocol: 'TCP'
        web:
          port: 8000
          expose: yes
          exposedPort: 80
          protocol: 'TCP'
          nodePort: 32080
        websecure:
          port: 8443
          expose: yes
          exposedPort: 443
          protocol: 'TCP'
          nodePort: 32443
          # Set TLS at the entrypoint
          # https://doc.traefik.io/traefik/routing/entrypoints/#tls
          tls:
            enabled: yes
            options: ""
            certResolver: ""
            domains: []
            # - main: example.com
            #   sans:
            #     - foo.example.com
            #     - bar.example.com
        metrics:
          port: 9100
          expose: yes
          exposedPort: 9100
          protocol: 'TCP'
      #
      # # TLS Options are created as TLSOption CRDs
      # # https://doc.traefik.io/traefik/https/tls/#tls-options
      # # Example:
      # # tlsOptions:
      # #   default:
      # #     sniStrict: true
      # #     preferServerCipherSuites: true
      # #   foobar:
      # #     curvePreferences:
      # #       - CurveP521
      # #       - CurveP384
      # tlsOptions: {}
      #
      # # Options for the main traefik service, where the entrypoints traffic comes
      # # from.
      service:
        enabled: true
        type: 'NodePort'
      #
      # ## Create HorizontalPodAutoscaler object.
      # ##
      # autoscaling:
      #   enabled: false
      # #   minReplicas: 1
      # #   maxReplicas: 10
      # #   metrics:
      # #   - type: Resource
      # #     resource:
      # #       name: cpu
      # #       targetAverageUtilization: 60
      # #   - type: Resource
      # #     resource:
      # #       name: memory
      # #       targetAverageUtilization: 60
      #
      # # Enable persistence using Persistent Volume Claims
      # # ref: http://kubernetes.io/docs/user-guide/persistent-volumes/
      # # After the pvc has been mounted, add the configs into traefik by using the `additionalArguments` list below, eg:
      # # additionalArguments:
      # # - "--certificatesresolvers.le.acme.storage=/data/acme.json"
      # # It will persist TLS certificates.
      # persistence:
      #   enabled: false
      #   name: data
      # #  existingClaim: ""
      #   accessMode: ReadWriteOnce
      #   size: 128Mi
      #   # storageClass: ""
      #   path: /data
      #   annotations: {}
      #   # subPath: "" # only mount a subpath of the Volume into the pod
      #
      # # If hostNetwork is true, runs traefik in the host network namespace
      # # To prevent unschedulabel pods due to port collisions, if hostNetwork=true
      # # and replicas>1, a pod anti-affinity is recommended and will be set if the
      # # affinity is left as default.
      # hostNetwork: false
      rbac:
        enabled: yes
        namespaced: no
      #
      # # Enable to create a PodSecurityPolicy and assign it to the Service Account via RoleBinding or ClusterRoleBinding
      # podSecurityPolicy:
      #   enabled: false
      #
      # # The service account the pods will use to interact with the Kubernetes API
      # serviceAccount:
      #   # If set, an existing service account is used
      #   # If not set, a service account is created automatically using the fullname template
      #   name: ""
      #
      # # Additional serviceAccount annotations (e.g. for oidc authentication)
      # serviceAccountAnnotations: {}
      #
      # resources: {}
      #   # requests:
      #   #   cpu: "100m"
      #   #   memory: "50Mi"
      #   # limits:
      #   #   cpu: "300m"
      #   #   memory: "150Mi"
      # affinity: {}
      # # # This example pod anti-affinity forces the scheduler to put traefik pods
      # # # on nodes where no other traefik pods are scheduled.
      # # # It should be used when hostNetwork: true to prevent port conflicts
      # #   podAntiAffinity:
      # #     requiredDuringSchedulingIgnoredDuringExecution:
      # #     - labelSelector:
      # #         matchExpressions:
      # #         - key: app
      # #           operator: In
      # #           values:
      # #           - {{ template "traefik.name" . }}
      # #       topologyKey: failure-domain.beta.kubernetes.io/zone
      # nodeSelector: {}
      # tolerations: []
      #
      # # Pods can have priority.
      # # Priority indicates the importance of a Pod relative to other Pods.
      # priorityClassName: ""
      #
      # # Set the container security context
      # # To run the container with ports below 1024 this will need to be adjust to run as root
      # securityContext:
      #   capabilities:
      #     drop: [ALL]
      #   readOnlyRootFilesystem: true
      #   runAsGroup: 65532
      #   runAsNonRoot: true
      #   runAsUser: 65532
      #
      # podSecurityContext:
      #   fsGroup: 65532
