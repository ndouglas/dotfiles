---
- name: 'Set a fact for the user.'
  ansible.builtin.set_fact:
    user: "{{ ansible_user_id }}"
  become: no
  when: 'user is not defined'

- name: 'Run a command to determine the user''s group.'
  ansible.builtin.command:
    cmd: 'id -gn'
  register: 'group_command'
  when: 'group is not defined'
  changed_when: no

- name: 'Run a command to determine the user''s uid.'
  ansible.builtin.command:
    cmd: 'id -u'
  register: 'uid_command'
  when: 'uid is not defined'
  changed_when: no

- name: 'Run a command to determine the user''s gid.'
  ansible.builtin.command:
    cmd: 'id -g'
  register: 'gid_command'
  when: 'gid is not defined'
  changed_when: no

- name: 'Set a fact for the group.'
  ansible.builtin.set_fact:
    group: "{{ group_command.stdout }}"
  when: 'group is not defined and group_command is defined'

- name: 'Set a fact for the uid.'
  ansible.builtin.set_fact:
    uid: "{{ uid_command.stdout | int }}"
  when: 'uid is not defined and uid_command is defined'

- name: 'Set a fact for the gid.'
  ansible.builtin.set_fact:
    gid: "{{ gid_command.stdout | int }}"
  when: 'gid is not defined and gid_command is defined'

- name: 'Set a fact for the user @ hostname.'
  ansible.builtin.set_fact:
    user_at_hostname: "{{ ( user + '@' + hostname ) | lower }}"
